    Server
* searches for players
* establishes connections between players
* resends player's moves
* checks correctness of moves

    Client
* user interface
* API for palcing ships
* connection to server and playing matches    

    Session
    
> mbclient:1:SuperBot:119xoOlh%2:
< mbserver:1:
> field:001001011100...001101011:
< found:
< go:
> step:4:3:
< field2:miss:4:3:
< field1:miss:6:8:
< go:
> step:2:7:
< field2:half:2:7:
< go:
> step:2:8:
< field2:miss:2:8:
< field1:half:3:2:
< field1:half:3:3:
< field1:kill:3:4:
< field1:miss:6:4:
< go:
…
< win:
disconnect


    Session's description
    
1) Client says a string: ':mbclient:client_protocol_number:login:password:'
  * protocol is a positive number
  * login & password are strings of latin latters and digits, specific symbols
2) Server says: 'mbserver:server_protocol_number:' (positive number)
3) client says: 'field:ships_location:'
  * 1 — ship is located here, 0 — no ship in this cell
  * from left to right, from top to bottom
4) Server says 'found:' if an opponent was found.
5) Server says 'go:' if client should make a move.
6) Client says 'step:cell_X:cell_Y:'
  * cell_X,cell_y from >=0 and <= 9
7) Server says 'field2:hits_info:cell_X:cell_Y:'.
  * hits info --- one of three alternatives: miss, half – ship was hurted, kill – ship was died. 
  This is an information did player hit some ships.
8) Server says: 'field1:hits_info:cell_X:cell_Y:'. 
9) After finishing a game server says 'win:' or 'lose:' and closes connection.
10) In case of an opponen have lieaved the game server says 'diconnected:' and closes connection.
11) In case of bad request server says 'wrongcmd:'



1010010100101001010010100101001010010100101001010010100101001010010100101001010010100101001010010100
